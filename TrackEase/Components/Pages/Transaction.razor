@page "/transaction"
@using System.Text;
<head>
    <link rel="stylesheet" href="css/Transaction.css" />
</head>

<h1><b>Transaction</b></h1>

<!-- Search Bar and Date Filter -->
<div class="search-filter-container">
    <div class="search-bar">
        <input type="text" @bind="searchTitle"
               class="form-control"
               id="searchInput"
               placeholder="Search by title, type, or tag..." />
    </div>
    <div class="type-filter">
        <label for="typeFilter">Type:</label>
        <select class="form-control" id="typeFilter" @bind="selectedType">
            <option value="">All</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
            <option value="Debt">Debt</option>
        </select>
    </div>
    <div class="date-filter">
        <label for="startDate">Start Date:</label>
        <input type="date" class="form-control" @bind="startDate" id="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" class="form-control" @bind="endDate" id="endDate" />

        <button class="btn filter-button" @onclick="ApplyFilters">Filter</button>
    </div>
</div>

<!-- Transactions Table -->
<div class="mt-5">
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Tag</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Type</th>
            <th>Notes</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody id="transactionTable">
        @if (FilteredTransactions().Any())
        {
            @foreach (var transaction in FilteredTransactions())
            {
                <tr>
                    <td>@transaction.Title</td>
                    <td><span>@transaction.TagName</span></td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                    <td>@GlobalState.CurrentUser?.Pref_currency @transaction.Amount</td>
                    <td>
                        <span class="@(transaction.Type == "Debt" ? "text-warning" :
                                     transaction.Type == "Expense" ? "text-danger" :
                                     transaction.Type == "Income" ? "text-success" : "")">
                            @transaction.Type
                        </span>
                    </td>
                    <td>@transaction.Notes</td>
                    <td>
                        <button type="button" class="update-button" @onclick="() => OpenEditPopup(transaction.Id)">Edit</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7">No transactions found.</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<!-- Popup Modal -->
@if (showEditPopup)
{
    <div class="modal-overlay">
        <div class="modal fade show">
            <div class="modal-dialog custom-modal-width">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Transaction Note</h5>
                        <button type="button" class="close" @onclick="CloseEditPopup">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="note">Add Note:</label>
                                <textarea id="note" class="form-control" @bind="note" placeholder="Enter your note here..."></textarea>
                            </div>
                            <div class="form-group text-right">
                                <button type="button" class="btn btn-primary" @onclick="SubmitNote">Submit</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseEditPopup">Cancel</button>
                            </div>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="text-danger">@errorMessage</div>
                            }
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Error Popup Modal -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="modal-overlay">
        <div class="modal fade show">
            <div class="modal-dialog custom-modal-width">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-danger">Error</h5>
                        <button type="button" class="close" @onclick="CloseErrorPopup">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <p class="text-danger">@errorMessage</p>
                        </div>
                        <div class="form-group text-right">
                            <button type="button" class="btn btn-danger" @onclick="CloseErrorPopup">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Add Custom Tag -->
<div class="mt-5 flex1">
    <h3><b>Add Custom Tag</b></h3>
    <form id="customTagForm" @onsubmit="HandleTagSubmit">
        <div class="form-group">
            <div class="mb-3">
                <label for="custom_tag"><b>Custom Tag Title:</b></label>
                <input type="text" @bind="newTag.TagName" class="form-control" id="custom_tag" placeholder="Enter a custom tag" required />
            </div>
            <div class="mb-3">
                <label>Type</label>
                <select class="form-control" @bind="newTag.TagType">
                    <option value=""></option>
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                </select>
            </div>
        </div>
        <button type="submit" class="btn update-button mt-3">Add Tag</button>
    </form>
</div>

<!-- Tags Table -->
<div class="mt-5">
    <table class="table">
        <thead>
        <tr>
            <th>S.N</th>
            <th>Tag Name</th>
            <th>Tag Type</th>
        </tr>
        </thead>
        <tbody id="tagTable">
            @if (tags.Any())
            {
                @foreach (var tag in tags)
                {
                    <tr>
                        <td>@tag.Id</td>
                        <td>@tag.TagName</td>
                        <td>@tag.TagType</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3">No tags found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private bool showEditPopup = false;
    private int selectedTransactionId;
    private string note = string.Empty;
    private string selectedType;
    private List<Models.Transaction> transactions = new();
    private List<Tag> tags = new();
    private Tag newTag = new();
    private string searchTitle;
    private DateTime? startDate;
    private DateTime? endDate;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactions = await TransactionService.GetAllTransactions();
            tags = TagService.GetAllTags();
        }
        catch (Exception ex)
        {
            errorMessage = "failed to get tags";
        }
    }

    private void OpenEditPopup(int transactionId)
    {
        selectedTransactionId = transactionId;
        var transaction = transactions.FirstOrDefault(t => t.Id == transactionId);
        note = transaction?.Notes ?? string.Empty;
        showEditPopup = true;
    }

    private void CloseEditPopup()
    {
        showEditPopup = false;
        note = string.Empty;
        selectedTransactionId = 0;
        errorMessage = string.Empty;
    }

    private void CloseErrorPopup()
    {
        errorMessage = null; 
    }

    private async Task SubmitNote()
    {
        try
        {
            var transactionToUpdate = transactions.FirstOrDefault(t => t.Id == selectedTransactionId);
            if (transactionToUpdate == null)
            {
                return;
            }

            transactionToUpdate.Notes = note;

            var updateResult = await TransactionService.UpdateTransaction(transactionToUpdate);

            if (updateResult)
            {
                transactions = await TransactionService.GetAllTransactions();
                CloseEditPopup();
            }
            else
            {
                errorMessage = "Failed to update the note.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update the note.";
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
    }

    private IEnumerable<Models.Transaction> FilteredTransactions()
    {
        return transactions.Where(t =>
            (string.IsNullOrEmpty(searchTitle) || 
             t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase) || 
             (!string.IsNullOrEmpty(t.TagName) && t.TagName.Contains(searchTitle, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(selectedType) || t.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || t.Date >= startDate) &&
            (!endDate.HasValue || t.Date <= endDate));
        
    }

    

    private void ApplyFilters()
    {
        StateHasChanged();
    }

    private void HandleTagSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(newTag?.TagName))
            {
                errorMessage = "Tag name cannot be empty."; 
                return; 
            }

            if (string.IsNullOrEmpty(newTag?.TagType))
            {
                errorMessage = "Tag type cannot be empty.";
                return;
            }

            if (TagService.AddTag(newTag))
            {
                newTag = new Tag(); 
                tags = TagService.GetAllTags(); 
            }
            else
            {
                errorMessage = "Failed to add tag. Duplicate or invalid input."; 
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to add tag."; 
        }
    }
}
