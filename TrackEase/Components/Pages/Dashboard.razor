@page "/dashboard"
@using MudBlazor
<head>
    <link rel="stylesheet" href="css/Dashboard.css" />
</head>

<div class="container mt-4">
    <!-- Cards for Totals -->
    <h3>Welcome, @GlobalState.CurrentUser?.Username</h3>
    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card bg-primary text-white text-center">
                <h5>Total Balance</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalBalance</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalExpense</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalDebt</h2>
            </div>
        </div>

        <div class="col-md-4">
            <div class="dashboard-card bg-info text-white text-center">
                <h5>Remaining Debt</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalRemainingDebt</h2>
            </div>
        </div>

        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Cleared Debt</h5>
                <h2>@GlobalState.CurrentUser?.Pref_currency @totalClearedDebt</h2>
            </div>
        </div>
    </div>

    <!-- Add Transaction Button -->
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <!-- Financial Overview and Transactions -->
    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Financial Overview</h5>
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Top Transactions</h5>
                <div class="mb-3">
                    <label>Filter Transactions by Date</label>
                    <div class="d-flex">
                        <input type="date" class="form-control me-2" @bind="startDate" />
                        <input type="date" class="form-control ms-2" @bind="endDate" />
                    </div>
                </div>
                <div class="transaction-list">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Tag</th>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Type</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody id="transactionTable">
                            @if (transactions.Any())
                            {
                                @foreach (var transaction in FilteredTransactions())
                                {
                                    <tr>
                                        <td><span>@transaction.Title</span></td>
                                        <td><span>@transaction.TagName</span></td>
                                        <td><span>@transaction.Date.ToString("yyyy-MM-dd")</span></td>
                                        <td><span>@GlobalState.CurrentUser?.Pref_currency @transaction.Amount</span></td>
                                        <td>
                                            <span class="@(transaction.Type == "Debt" ? "text-warning" :
                                                         transaction.Type == "Expense" ? "text-danger" :
                                                         transaction.Type == "Income" ? "text-success" : "")">
                                                @transaction.Type
                                            </span>
                                        </td>
                                        <td><span>@transaction.Notes</span></td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7">No transactions found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="dashboard-card">
            <div class="mt-5">
                <h2><b>Pending Debts</b></h2>
                <div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Amount</th>
                                <th>Due Date</th>
                                <th>Source</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (debts.Any())
                            {
                                @foreach (var debt in FilterPendingDebts())
                                {
                                    <tr>
                                        <td>@debt.Title</td>
                                        <td>@GlobalState.CurrentUser?.Pref_currency @debt.Amount</td>
                                        <td>@debt.DueDate</td>
                                        <td>@debt.Source</td>
                                        <td><span class="text-danger">@debt.Status</span></td>
                                        <td>
                                            @if (debt.Status != "Cleared")
                                            {
                                                <button class="update-button" @onclick="() => ClearDebt(debt.Id)">Clear debt</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7">No Debts found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="dashboard-card">
            <h2><b>Highest Lowest Transactions</b></h2>
            <!-- Search Bar and Date Filter -->

            <!-- Search Bar and Type Filter -->
            <div class="search-filter-container">
                <div class="type-filter">
                    <label for="typeFilter">Type:</label>
                    <select class="form-control" id="typeFilter" @bind="selectedType">
                        <option value="">All</option>
                        <option value="Income">Inflow</option>
                        <option value="Expense">Outflow</option>
                        <option value="Debt">Debt</option>
                    </select>
                </div>

                <div class="type-filter">
                    <label for="typeSort">Sort:</label>
                    <select class="form-control" id="typeSort" @bind="selectedSort">
                        <option value="">All</option>
                        <option value="Highest">Highest</option>
                        <option value="Lowest">Lowest</option>
                    </select>
                </div>
            </div>

            <div class="dashboard-card">
                <div class="transaction-list">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Tag</th>
                                <th>Date</th>
                                <th>Amount</th>
                                <th>Type</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody id="transactionTable">
                            @if (transactions.Any())
                            {
                                @foreach (var transaction in FilteredSortTransactions())
                                {
                                    <tr>
                                        <td><span>@transaction.Title</span></td>
                                        <td><span>@transaction.TagName</span></td>
                                        <td><span>@transaction.Date.ToString("yyyy-MM-dd")</span></td>
                                        <td><span>@GlobalState.CurrentUser?.Pref_currency @transaction.Amount</span></td>
                                        <td>
                                            <span class="@(transaction.Type == "Debt" ? "text-warning" :
                                                         transaction.Type == "Expense" ? "text-danger" :
                                                         transaction.Type == "Income" ? "text-success" : "")">
                                                @transaction.Type
                                            </span>
                                        </td>
                                        <td><span>@transaction.Notes</span></td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7">No transactions found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    @if (showErrorModal)
    {
        <div class="modal-overlay">
            <div class="modal-content custom-modal-width">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-danger">@errorMessage</p> <!-- Red color for the error message -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
                </div>
            </div>
        </div>
    }

</div>

<!--Transaction modal-->
@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="z-index: 1050;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Title</label>
                        <input type="text" class="form-control" @bind="newTransaction.Title" />
                    </div>
                    <div class="mb-3">
                        <label>Tags</label>
                        <select class="form-control" @bind="newTransaction.TagName">
                            <option value=""></option>
                            @if (_tags.Any())
                            {
                                @foreach (var tag in _tags)
                                {
                                    <option value="@tag.TagName">@tag.TagName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount (@GlobalState.CurrentUser?.Pref_currency)</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.Type">
                            <option value=""></option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>

                    @if (newTransaction.Type == "Debt")
                    {
                        <div class="mb-3">
                            <label>Due Date</label>
                            <input type="date" class="form-control" @bind="newDebt.DueDate" />
                        </div>
                        <div class="mb-3">
                            <label>Source</label>
                            <select class="form-control" @bind="Source">
                                <option value=""></option>
                                <option value="Kumari Bank">Kumari Bank LTD.</option>
                                <option value="Nic Asia Bank">Nic Asia Bank LTB.</option>
                                <option value="Everest Bank">Everest Bank LTD.</option>
                            </select>
                        </div>
                    }
                    <div class="mb-3">
                        <label>Notes</label>
                        <input type="text" class="form-control" @bind="newTransaction.Notes" />
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Models.Debt> debts = new();
    private string? ErrorMessage;
    private double[] data = new double[] {};
  
    private string[] labels = new string[] { "Income", "Expense", "Debt" };

    private string selectedType;
    private string selectedSort;
    private Models.Transaction newTransaction = new();
    private List<Models.Tag> _tags = new();
    private Models.Debt newDebt = new();
    private bool showModal = false;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal totalBalance;
   
    private DateTime? startDate;
    private DateTime? endDate;
    private string Source;
    private List<Models.Transaction> transactions = new();

    private decimal totalRemainingDebt;
    private decimal totalClearedDebt;

    public List<Tag> GetAllTags()
    {
        if (_tags == null || !_tags.Any())
        {
            _tags = TagService.GetAllTags(); 
        }
        return _tags;
    }

    private async Task<List<Models.Transaction>> GetTransactions()
    {
        try
        {
            transactions = await TransactionService.GetAllTransactions();
            return transactions;
        }
        catch (Exception ex)
        {
            throw new Exception();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTransactions();
        _tags = GetAllTags();
        debts = DebtService.GetAllDebts(); 
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
        totalExpense = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        totalRemainingDebt = debts.Where(d => d.Status == "Pending").Sum(d => d.Amount);
        totalClearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        totalBalance = totalIncome + totalRemainingDebt - totalExpense;
      
        data = new double[] { (double)totalIncome, (double)totalExpense, (double)totalDebt };
    }

    private IEnumerable<Models.Transaction> FilteredTransactions()
    {
        return transactions.Where(t =>
            (!startDate.HasValue || t.Date >= startDate) &&
            (!endDate.HasValue || t.Date <= endDate));
    }

    private IEnumerable<Models.Debt> FilterPendingDebts()
    {
        return debts.Where(d => d.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<Models.Transaction> FilteredSortTransactions()
    {
        var filteredTransactions = transactions.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedType))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase));
        }

        if (selectedSort == "Highest")
        {
            filteredTransactions = filteredTransactions
                .OrderByDescending(t => t.Amount) 
                .Take(3); 
        }
        else if (selectedSort == "Lowest")
        {
            filteredTransactions = filteredTransactions
                .OrderBy(t => t.Amount) 
                .Take(3); 
        }

        return filteredTransactions;
    }

    private void OpenModal()
    {
        newTransaction = new Models.Transaction { Date = DateTime.Now };
        if (_tags == null || !_tags.Any())
        {
            _tags = GetAllTags(); 
        }
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task AddTransaction()
    {
        try
        {
            if (string.IsNullOrEmpty(newTransaction.Type))
            {
                ErrorMessage = "Transaction type cannot be empty. Please select a type.";
                return;
            }

            if (string.IsNullOrEmpty(newTransaction.Title))
            {
                ErrorMessage = "Transaction title cannot be empty.";
                return; 
            }
            if (string.IsNullOrEmpty(newTransaction.TagName))
            {
                ErrorMessage = "Transaction tag cannot be empty. Please select a tag.";
                return; 
            }

            if (newTransaction.Amount <= 0)
            {
                ErrorMessage = "Amount must be greater than zero.";
                return;
            }

            if (newTransaction.Type == "Expense")
            {
                if (totalBalance < newTransaction.Amount)
                {
                    ErrorMessage = "Insufficient amount.";
                    return; 
                }
            }

            if (newTransaction.Type == "Debt")
            {
                if (string.IsNullOrEmpty(Source))
                {
                    ErrorMessage = "Please select a debt source.";
                    return;
                }

                newDebt.Title = newTransaction.Title;
                newDebt.Amount = newTransaction.Amount;
                newDebt.Source = Source;
                newDebt.Status = "Pending"; 

                var debtResult = await DebtService.addDebt(newDebt);

                if (!debtResult)
                {
                    ErrorMessage = "Failed to add the debt.";
                    return;
                }
            }

            var transactionResult = await TransactionService.addTransaction(newTransaction);

            if (transactionResult)
            {
                newTransaction = new Models.Transaction(); 
                newDebt = new Models.Debt(); 
                await GetTransactions(); 
                CalculateTotals(); 
                CloseModal(); 
            }
            else
            {
                ErrorMessage = "Failed to add the transaction. Please check the details.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred.";
        }
    }

    private bool showErrorModal = false;
    private string errorMessage = string.Empty;

    private async Task ClearDebt(int debtId)
    {
        var debt = DebtService.GetAllDebts().FirstOrDefault(d => d.Id == debtId);
        if (debt == null)
        {
            return;
        }

        decimal totalBalance = this.totalBalance; 

        if (totalBalance < debt.Amount)
        {
            errorMessage = "Insufficient balance to clear the debt.";
            showErrorModal = true;  
            return;
        }

        var success = await DebtService.ClearDebt(debtId);

        if (success)
        {
            debts = DebtService.GetAllDebts();
            CalculateTotals(); 
        }
        else
        {
            errorMessage = "Failed to clear the debt. Please try again.";
            showErrorModal = true;  
        }
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }
}
