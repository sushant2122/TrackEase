@page "/dashboard"
@using Microcharts
@inject GlobalState _globalstate;
@using SkiaSharp
@using MudBlazor
@using TrackEase.Models
<head>
    <link rel="stylesheet" href="css/Dashboard.css" />
</head>

<div class="container mt-4">


    <!-- Cards for Totals -->
    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card bg-primary text-white text-center">
                <h5>Total Balance</h5>
                <h2> @totalBalance</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@totalDebt</h2>
            </div>
        </div>

        <div class="col-md-4">
            <div class="dashboard-card bg-info text-white text-center">
                <h5>Remaining Debt</h5>
                <h2>@totalRemainingDebt</h2>
            </div>
        </div>

        <div class="col-md-4">
            <div class="dashboard-card bg-success  text-white text-center">
                <h5>Cleared Debt</h5>
                <h2>@totalClearedDebt</h2>
            </div>
        </div>
    </div>

    <!-- Add Transaction Button -->
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <!-- Financial Overview and Transactions -->
    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Financial Overview</h5>
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px"
                          InputData="@data"
                          InputLabels="@labels"
                />

            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Top Transactions</h5>
                <div class="mb-3">
                    <label>Filter Transactions by Date</label>
                    <div class="d-flex">
                        <input type="date" class="form-control me-2" @bind="startDate" />
                        <input type="date" class="form-control ms-2" @bind="endDate" />
                    </div>
                </div>
                <div class="transaction-list">
                    <table class="table">
                        <thead>
                        <tr>

                            <th>Title</th>
                            <th>Description</th>
                            <th>Tag</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Notes</th>
                        </tr>

                        </thead>
                        <tbody id="transactionTable">
                        @if (transactions.Any())
                        {
                            @foreach (var transaction in FilteredTransactions())
                            {
                                <tr>

                                    <td><span>@transaction.Title</span></td>
                                    <td><span>@transaction.Description</span></td>
                                    <td><span>@transaction.TagName</span></td>
                                    <td>  <span>@transaction.Date.ToString("yyyy-MM-dd")</span></td>
                                    <td>    <span>@transaction.Amount</span></td>
                                    <td>
                                        <span class="@(transaction.Type == "Debt" ? "text-warning" :
                                                     transaction.Type == "Expense" ? "text-danger" :
                                                     transaction.Type == "Income" ? "text-success" : "")">
                                            @transaction.Type
                                        </span>
                                    </td>
                                    <td> <span>@transaction.Notes</span></td>

                                </tr>
                            }

                        }
                        else
                        {
                            <tr>
                                <td colspan="7">No transactions found.</td>
                            </tr>

                        }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="dashboard-card">
            <div class="mt-5">
                <h2><b>Pending Debts</b></h2>
                <div>
                    <table class="table">
                        <thead>
                        <tr>

                            <th>Title</th>
                            <th>Amount</th>
                            <th>Due Date</th>
                            <th>Source</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (debts.Any())
                        {
                            @foreach (var debt in FilterPendingDebts())
                            {
                                <tr>

                                    <td>@debt.Title</td>
                                    <td>Npr. @debt.Amount</td>
                                    <td>@debt.DueDate</td>
                                    <td>@debt.Source</td>
                                    <td><span class="text-danger">@debt.Status</span> </td>
                                    <td>
                                        <form method="post">
                                            <button type="submit" class="update-button">Clear debt</button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7">No Debts found.</td>
                            </tr>
                        }

                        </tbody>
                    </table>
                </div>
            </div>
            
            
        </div>

        

    </div>
</div>
<!--Transaction modal-->
@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="z-index: 1050;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Title</label>
                        <input type="text" class="form-control" @bind="newTransaction.Title" />
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="newTransaction.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Tags</label>
                        <select class="form-control" @bind="newTransaction.TagName">
                            @if (_tags.Any())
                            {
                                @foreach (var tag in _tags)
                                {
                                    <option value="@tag.TagName">@tag.TagName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.Type">
                            <option value=""></option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>

                    @if (newTransaction.Type == "Debt")
                    {
                        <div class="mb-3">
                            <label>Due Date</label>
                            <input type="date" class="form-control" @bind="newDebt.DueDate" />
                        </div>
                        <div class="mb-3">
                            <label>Source</label>
                            <select class="form-control" @bind="Source">
                                <option value="KumariBank">Kumari Bank LTD.</option>
                                <option value="NicAsiaBank">Nic Asia Bank LTB.</option>
                                <option value="EverestBank">Everest Bank LTD.</option>
                            </select>
                        </div>
                    }
                    <div class="mb-3">
                        <label>Notes</label>
                        <input type="text" class="form-control" @bind="newTransaction.Notes" />
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger">@ErrorMessage</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>

                
            </div>
        </div>
    </div>
}


@code {
    private List<Models.Debt> debts = new();
    private string? ErrorMessage;
    private double[] data = new double[] {};

    // Labels for the chart
    private string[] labels = new string[] { "Income", "Expense", "Debt" };

 

    // Fields
    private Models.Transaction newTransaction = new();
    private List<Models.Tag> _tags = new();
    private Models.Debt newDebt = new();
    private bool showModal = false;
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal totalBalance;
   
    private DateTime? startDate;
    private DateTime? endDate;
    private string Source;
    private List<Models.Transaction> transactions = new();

    // Transaction list
    private decimal totalRemainingDebt;
    private decimal totalClearedDebt;
    public List<Tag> GetAllTags()
    {
        // Example of fetching tags from a local source
        if (_tags == null || !_tags.Any())
        {
            _tags = TagService.GetAllTags(); // Ensure this is a synchronous call
        }
        return _tags;
    }
    private async Task<List<Models.Transaction>> GetTransactions()
    {
        try
        {
            transactions = await TransactionSerive.GetAllTransactions();
            return transactions;
        }
        catch (Exception ex)
        {
            throw new Exception();
        }
    }


    // Initialize totals - Ensure this method is non-static
    protected override async Task OnInitializedAsync()
    {
        await GetTransactions();
        _tags = GetAllTags(); // Synchronously fetch tags
        debts = DebtService.GetAllDebts(); 
        CalculateTotals();
    }

    // Calculate totals
    private void CalculateTotals()
    {
        totalIncome = transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
        totalExpense = transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        totalBalance = totalIncome + totalDebt - totalExpense;
        totalRemainingDebt = debts.Where(d => d.Status == "Pending").Sum(d => d.Amount);
        totalClearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        // Convert the totals to a double[] for chart data
        data = new double[] { (double)totalIncome, (double)totalExpense, (double)totalDebt };
    }

    // Filter transactions
    private IEnumerable<Models.Transaction> FilteredTransactions()
    {
        return transactions.Where(t =>
            (!startDate.HasValue || t.Date >= startDate) &&
            (!endDate.HasValue || t.Date <= endDate));
    }
    //Filter debts
    private IEnumerable<Models.Debt> FilterPendingDebts()
    {
        return debts.Where(d => d.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase));
    }

    // Open modal
    private void OpenModal()
    {
        newTransaction = new Models.Transaction { Date = DateTime.Now };
        if (_tags == null || !_tags.Any())
        {
            _tags = GetAllTags(); // Ensure tags are populated
        }
        showModal = true;
    }

    // Close modal
    private void CloseModal() => showModal = false;
    
    
    // Add transaction
 // Add transaction
private async Task AddTransaction()
{
    try
    {
        // Validate if the transaction is an "Expense" and check for sufficient funds
        if (newTransaction.Type == "Expense")
        {
            var totalIncome = totalBalance;

            if (totalIncome < newTransaction.Amount)
            {
                ErrorMessage = "Insufficient amount";
                return; // Prevent further execution
            }
        }

        // If the transaction type is "Debt"
        if (newTransaction.Type == "Debt")
        {
            // Check if Source is null or empty before proceeding
            if (string.IsNullOrEmpty(Source))
            {
                ErrorMessage = "Please select a debt source.";
               
                return;
            }

            // Populate the newDebt object with shared and specific attributes
            newDebt.Title = newTransaction.Title;
            newDebt.Amount = newTransaction.Amount;
            newDebt.Source = Source;
            newDebt.Status = "Pending"; // Default status for new debts

            // Call the DebtService to add the new debt
            var debtResult = await DebtService.addDebt(newDebt);

            if (!debtResult)
            {
                ErrorMessage = "Failed to add the debt.";
                return;
            }
        }

        // Add the transaction using the service
        var transactionResult = await TransactionSerive.addTransaction(newTransaction);

        if (transactionResult)
        {
            // Success handling
            Console.WriteLine("Transaction added successfully!");
            newTransaction = new Models.Transaction(); // Reset the form
            newDebt = new Models.Debt(); // Reset the debt form
            await GetTransactions(); // Refresh transactions
            CalculateTotals(); // Recalculate totals
            CloseModal(); // Close the modal
        }
        else
        {
            ErrorMessage = "Failed to add the transaction. Please check the details.";
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error adding transaction: {ex.Message}");
        ErrorMessage = "An unexpected error occurred.";
    }
}

}
